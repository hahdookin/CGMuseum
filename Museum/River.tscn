[gd_scene load_steps=9 format=2]

[ext_resource path="res://Assets/prototypes/uv_checker.png" type="Texture" id=1]

[sub_resource type="PlaneMesh" id=1]
size = Vector2( 2, 16 )
subdivide_width = 32
subdivide_depth = 32

[sub_resource type="Shader" id=2]
code = "shader_type spatial;

render_mode specular_toon;

uniform bool u_scroll = false;
uniform float u_scroll_speed = 1.0;

uniform float u_heightmap_strength = 1.0;
uniform vec2 u_uv_scale = vec2(1.0);

uniform sampler2D u_noise;
uniform sampler2D u_noise_nmap;
uniform sampler2D u_uv_checker;

varying vec2 v_vertex_uv;

void vertex() {
    v_vertex_uv = VERTEX.xz * u_uv_scale + (u_scroll ? vec2(0, TIME * u_scroll_speed) : vec2(0.0));
    float height = texture(u_noise, v_vertex_uv).r;
    VERTEX.y += height * u_heightmap_strength;
}

void fragment() {
    float fresnel = sqrt(1.0 - dot(NORMAL, VIEW));
    vec4 tex = texture(u_uv_checker, v_vertex_uv);
    NORMALMAP = texture(u_noise_nmap, v_vertex_uv).rgb;
    RIM = 0.2;
    METALLIC = 0.0;
    ROUGHNESS =  0.01 * (1.0 - fresnel);
    ALBEDO = vec3(0.01, 0.03, 0.05) + (0.1 * fresnel);//tex.rgb;
}"

[sub_resource type="OpenSimplexNoise" id=4]

[sub_resource type="NoiseTexture" id=5]
seamless = true
noise = SubResource( 4 )

[sub_resource type="OpenSimplexNoise" id=7]

[sub_resource type="NoiseTexture" id=6]
seamless = true
as_normalmap = true
noise = SubResource( 7 )

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 2 )
shader_param/u_scroll = true
shader_param/u_scroll_speed = 0.05
shader_param/u_heightmap_strength = 0.2
shader_param/u_uv_scale = Vector2( 0.2, 0.2 )
shader_param/u_noise = SubResource( 5 )
shader_param/u_noise_nmap = SubResource( 6 )
shader_param/u_uv_checker = ExtResource( 1 )

[node name="Spatial" type="Spatial"]

[node name="MeshInstance" type="MeshInstance" parent="."]
mesh = SubResource( 1 )
material/0 = SubResource( 3 )
