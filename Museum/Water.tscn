[gd_scene load_steps=26 format=2]

[ext_resource path="res://Assets/displacement.png" type="Texture" id=1]
[ext_resource path="res://Assets/prototypes/Dark/texture_13.png" type="Texture" id=2]
[ext_resource path="res://Assets/prototypes/Purple/texture_05.png" type="Texture" id=3]
[ext_resource path="res://Assets/ripple.png" type="Texture" id=4]
[ext_resource path="res://Assets/skywater.png" type="Texture" id=5]
[ext_resource path="res://Assets/prototypes/uv_checker.png" type="Texture" id=6]
[ext_resource path="res://Assets/prototypes/Dark/texture_12.png" type="Texture" id=7]

[sub_resource type="PlaneMesh" id=1]
size = Vector2( 3, 3 )
subdivide_width = 32
subdivide_depth = 32

[sub_resource type="Shader" id=2]
code = "shader_type spatial;

uniform sampler2D u_displacement;
uniform sampler2D u_ripple;
uniform sampler2D u_wave;

uniform float u_bright_remove_threshold = 1.0;
uniform float u_bright_keep_threshold = 1.0;
uniform float u_dark_threshold = 0.0;
uniform float u_speed = 0.05;
uniform vec2 u_uv_scale = vec2(1);

void vertex() {
    vec2 uv = UV * u_uv_scale;
    float height = texture(u_displacement, uv + vec2(TIME, -TIME) * u_speed).r;
    VERTEX.y += (height - 0.5) * 0.15;
}

void fragment() {
    vec2 uv = UV * u_uv_scale;
    
    // Mix layers of scrolling noise
    vec4 layer_a = texture(u_displacement, uv + vec2(TIME, -TIME) * u_speed);
    vec4 layer_b = texture(u_displacement, uv + TIME * u_speed * .5);
//    vec4 wave = texture(u_wave, UV * 2.0 + TIME * u_speed * 3.0);
    
    // Combine both scrolling noise textures and their alpha channels
    vec3 color = mix(layer_a.rgb, layer_b.rgb, 0.5);
    float alpha = mix(layer_a.a, layer_b.a, 0.5);
    
    // Remove colors that are really bright but not super bright
    float bright_remove_threshold = u_bright_remove_threshold;
//    if (UV.x < 0.1) bright_remove_threshold = 1.0 - UV.x / .1;
    if (color.r <= u_bright_keep_threshold && color.r > bright_remove_threshold) color = vec3(0);
    
    // Hide super dark spots
    if (color.r < u_dark_threshold) alpha = 0.0;
    ALBEDO = color;
    ALPHA = alpha;
    
//    uv = UV - 0.5;
//    uv *= 2.0;
//    uv += 0.5;
//    ALBEDO = texture(u_ripple, uv).rgb;
//    ALPHA = 1.0;
}"

[sub_resource type="ShaderMaterial" id=12]
shader = SubResource( 2 )
shader_param/u_bright_remove_threshold = 0.219
shader_param/u_bright_keep_threshold = 0.38
shader_param/u_dark_threshold = 0.0
shader_param/u_speed = 0.017
shader_param/u_uv_scale = Vector2( 0.5, 0.5 )
shader_param/u_displacement = ExtResource( 1 )
shader_param/u_ripple = ExtResource( 4 )
shader_param/u_wave = ExtResource( 5 )

[sub_resource type="PlaneMesh" id=11]
size = Vector2( 3, 3 )

[sub_resource type="Shader" id=10]
code = "shader_type spatial;

//render_mode unshaded;

uniform sampler2D u_texture;

uniform sampler2D u_displacement;
uniform float u_speed = 0.05;
uniform float u_strength = 1.0;
uniform vec2 u_uv_scale = vec2(1);

void fragment() {
    vec2 uv = UV * u_uv_scale;
    vec4 layer_a = texture(u_displacement, uv + vec2(TIME, -TIME) * u_speed);
    vec4 layer_b = texture(u_displacement, uv + TIME * u_speed * .5);
    
    // Mix the noise textures and alpha channels
    vec3 color = mix(layer_a.rgb, layer_b.rgb, 0.5);
    float alpha = mix(layer_a.a, layer_b.a, 0.5);
    
    // UV displacement
    float displacement = (color.r * 2.0 - 1.0) * u_strength;
    
//    ALBEDO = texture(u_texture, UV + displacement).rgb * vec3(0.25);
    vec3 col = texture(u_texture, UV + displacement).rgb;
    ALBEDO = vec3(pow(col.r, 2.2), pow(col.g, 2.2), pow(col.b, 2.2));
}"

[sub_resource type="ShaderMaterial" id=13]
shader = SubResource( 10 )
shader_param/u_speed = 0.017
shader_param/u_strength = 0.037
shader_param/u_uv_scale = Vector2( 0.5, 0.5 )
shader_param/u_texture = ExtResource( 2 )
shader_param/u_displacement = ExtResource( 1 )

[sub_resource type="Shader" id=18]
code = "shader_type spatial;

render_mode async_visible,blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx, unshaded;

uniform sampler2D u_texture;

// Plane info
uniform vec2 u_size = vec2(4);

// Point of incidence in world space
uniform vec3 u_ws_point = vec3(0);
uniform float u_point_size = 1.0;
uniform sampler2D u_ws_point_texture;

uniform vec2 u_uv_center = vec2(0.5);
uniform float u_uv_extents = 0.1;

// Y = (X-A)/(B-A) * (D-C) + C
float map2range(float x, float a, float b, float c, float d) {
    return (x - a) / (b - a) * (d - c) + c;
}

void vertex() {
    
}

void fragment() {
    vec3 color;
    vec4 albedo_tex = texture(u_texture, UV);
    color = albedo_tex.rgb;
    
    // Bounding UVs of where texture should be
    vec2 lower_uv_bounds = u_uv_center - u_uv_extents;
    vec2 upper_uv_bounds = u_uv_center + u_uv_extents;
    // Check if current UVs exist in that box
    if (all(greaterThanEqual(UV, lower_uv_bounds)) && all(lessThanEqual(UV, upper_uv_bounds))) {
        vec2 inner_uvs = vec2(map2range(UV.x, lower_uv_bounds.x, upper_uv_bounds.x, 0, 1), 
                              map2range(UV.y, lower_uv_bounds.y, upper_uv_bounds.y, 0, 1));
        color = texture(u_ws_point_texture, inner_uvs).rgb;
    }
    ALBEDO = color;
//	METALLIC = 0.5;
//	ROUGHNESS = 1.0;
//	SPECULAR = 0.5;
}"

[sub_resource type="ShaderMaterial" id=6]
shader = SubResource( 18 )
shader_param/u_size = Vector2( 4, 4 )
shader_param/u_ws_point = Vector3( 2.911, 0, 0 )
shader_param/u_point_size = 1.0
shader_param/u_uv_center = Vector2( 0.5, 0.5 )
shader_param/u_uv_extents = 0.102
shader_param/u_texture = ExtResource( 7 )
shader_param/u_ws_point_texture = ExtResource( 4 )

[sub_resource type="PlaneMesh" id=14]
size = Vector2( 4, 4 )
subdivide_width = 32
subdivide_depth = 32

[sub_resource type="Shader" id=5]
code = "shader_type spatial;

uniform sampler2D u_ripple;
uniform float u_scale = 1.0;

uniform float u_bright_remove_threshold = 1.0;
uniform float u_bright_keep_threshold = 1.0;
uniform float u_dark_threshold = 0.0;
uniform float u_speed = 0.05;

uniform float u_rotation_degrees = 0.0;

// Get a rotation matrix
mat2 rotate2d(float _angle){
    return mat2(
        vec2(cos(_angle),-sin(_angle)),
        vec2(sin(_angle),cos(_angle))
    );
}

void fragment() {
    vec2 point = vec2(0.5);
    vec2 uv = UV - 0.5;
    uv *= 10.0 - mod(TIME, 10);
    uv += 0.5;
    vec2 layer_a_uv = rotate2d(TIME * -10.0 * 3.14159 / 180.0) * (uv - vec2(0.5)) + vec2(0.5);
    vec2 layer_b_uv = rotate2d(TIME * 30.0 * 3.14159 / 180.0) * (uv - vec2(0.5)) + vec2(0.5);
    
    vec4 layer_a = texture(u_ripple, layer_a_uv);
    vec4 layer_b = texture(u_ripple, layer_b_uv);
    
//    vec4 tex_color = texture(u_ripple, uv);
//    vec3 color = tex_color.rgb;
    vec4 tex = mix(layer_a, layer_b, 0.5);
    vec3 color = tex.rgb;
    float alpha = tex.a;
    
    // Combine both scrolling noise textures and their alpha channels
    
    // Remove colors that are really bright but not super bright
    float bright_remove_threshold = u_bright_remove_threshold;
    if (color.r <= u_bright_keep_threshold && color.r > bright_remove_threshold) color = vec3(0);
    
    // Hide super dark spots
    if (color.r < u_dark_threshold) alpha = 0.0;
    ALBEDO = color;
    ALPHA = alpha;
    
//    ALBEDO = tex_color.rgb;
//    ALPHA = tex_color.a;
}"

[sub_resource type="ShaderMaterial" id=15]
shader = SubResource( 5 )
shader_param/u_scale = 1.0
shader_param/u_bright_remove_threshold = 0.304
shader_param/u_bright_keep_threshold = 0.649
shader_param/u_dark_threshold = 0.0
shader_param/u_speed = 0.1
shader_param/u_rotation_degrees = 30.0
shader_param/u_ripple = ExtResource( 4 )

[sub_resource type="PlaneMesh" id=16]
size = Vector2( 4, 4 )
subdivide_width = 32
subdivide_depth = 32

[sub_resource type="SpatialMaterial" id=17]
albedo_texture = ExtResource( 3 )

[sub_resource type="PlaneMesh" id=19]
size = Vector2( 4, 4 )

[sub_resource type="Shader" id=20]
code = "// NOTE: Shader automatically converted from Godot Engine 3.5.stable's SpatialMaterial.

shader_type spatial;
render_mode async_visible,blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;


void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
}




void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	METALLIC = metallic;
	ROUGHNESS = roughness;
	SPECULAR = specular;
}
"

[sub_resource type="ShaderMaterial" id=21]
shader = SubResource( 20 )
shader_param/albedo = Color( 1, 1, 1, 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/roughness = 1.0
shader_param/point_size = 1.0
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
shader_param/texture_albedo = ExtResource( 6 )

[sub_resource type="Animation" id=22]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("WaterPlane:translation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector3( 0, 0, 0 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("WaterPlane:rotation_degrees")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector3( 0, 0, 0 ) ]
}

[sub_resource type="Animation" id=23]
resource_name = "WaterRaise"
length = 5.0
tracks/0/type = "value"
tracks/0/path = NodePath("WaterPlane:translation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1, 2, 3, 4, 5 ),
"transitions": PoolRealArray( -3, 1, 1, 1, -3, 1 ),
"update": 0,
"values": [ Vector3( 0, 0, 0 ), Vector3( 0, 2, 0 ), Vector3( 0, 2.05, 0 ), Vector3( 0, 2, 0 ), Vector3( 0, 2.05, 0 ), Vector3( 0, 0, 0 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("WaterPlane:rotation_degrees")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 1, 4 ),
"transitions": PoolRealArray( 1, -5.25, 1 ),
"update": 0,
"values": [ Vector3( 0, 0, 0 ), Vector3( 0, 0, 0 ), Vector3( 0, 360, 0 ) ]
}

[node name="Spatial" type="Spatial"]

[node name="WaterPlane" type="MeshInstance" parent="."]
mesh = SubResource( 1 )
material/0 = SubResource( 12 )

[node name="SurfacePlane" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.255948, 0 )
mesh = SubResource( 11 )
material/0 = SubResource( 13 )

[node name="MeshInstance3" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 5.05365, 0, 0 )
visible = false
mesh = SubResource( 1 )
material/0 = SubResource( 6 )

[node name="MeshInstance4" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 4.42695, -0.702184, 4.47113 )
visible = false
mesh = SubResource( 14 )
material/0 = SubResource( 15 )

[node name="MeshInstance5" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 4.42695, -1.95037, 4.47113 )
visible = false
mesh = SubResource( 16 )
material/0 = SubResource( 17 )

[node name="MeshInstance" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 9.63312, 0, 0 )
visible = false
mesh = SubResource( 19 )
material/0 = SubResource( 21 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
anims/RESET = SubResource( 22 )
anims/WaterRaise = SubResource( 23 )
