[gd_scene load_steps=10 format=2]

[ext_resource path="res://Frames/RectFrame.tscn" type="PackedScene" id=1]
[ext_resource path="res://Shaders/GrowingRectsMaterial.tres" type="Material" id=2]
[ext_resource path="res://Frames/SquareFrame.tscn" type="PackedScene" id=3]
[ext_resource path="res://Shaders/NoiseMaterial.tres" type="Material" id=4]
[ext_resource path="res://Shaders/BasisMaterial.tres" type="Material" id=5]
[ext_resource path="res://Frames/SquareCanvas.tscn" type="PackedScene" id=6]
[ext_resource path="res://Shaders/TestMaterial.tres" type="Material" id=7]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;

//render_mode unshaded;

uniform vec2 u_plane_size;
uniform vec2 u_scale = vec2(1.0);
uniform float u_rotation_degrees = 0.0;

uniform int u_iterations = 3; // Number of rectangles to draw
uniform bool u_cycle_back = false;
uniform float u_speed = 1.0; // Speed at which the animation happens
uniform float u_precision_correction = 0.01;
uniform float u_border_scale : hint_range(0, 1) = 1.0; // Border width is border_scale/iterations
uniform vec4 u_background_color : hint_color = vec4(vec3(0), 1); // Color of pixels not in a rectangle
uniform vec4 u_start_color : hint_color = vec4(1, 0, 0, 1);
uniform vec4 u_end_color : hint_color = vec4(0, 0, 1, 1);

uniform float u_fade_y : hint_range(0, 1) = 1.0;

// Get a rotation matrix
mat2 rotate2d(float _angle){
    return mat2(
        vec2(cos(_angle),-sin(_angle)),
        vec2(sin(_angle),cos(_angle))
    );
}

float random (vec2 st) {
    return fract(sin(dot(st.xy,
                         vec2(12.9898,78.233)))*
        43758.5453123);
}

// Determine whether fragment is in a rectangle
// st -> fragment position in st coords ((0, 0) is bottom left, (1, 1) is top right)
// pos -> rectangle's starting position in st coords
// size -> rectangle's width & height
// border -> border thickness of rectangle
bool in_rectangle(vec2 st, vec2 pos, vec2 size, float border) {
    vec2 inner_pos = pos + border;
    vec2 inner_size = size - border * 2.0;
    if (st.x >= pos.x && st.x <= pos.x + size.x && 
        st.y >= pos.y && st.y <= pos.y + size.y) {
        // Check if fragment is not in the inner rect formed by the border
        if (!(st.x >= inner_pos.x && st.x <= inner_pos.x + inner_size.x && 
        st.y >= inner_pos.y && st.y <= inner_pos.y + inner_size.y))
            return true;
    }
    return false;
}

void fragment() {
//    vec3 cam_world_pos = (CAMERA_MATRIX * vec4(vec3(0), 1.0)).xyz;
//    vec3 vert_world_pos = (CAMERA_MATRIX * vec4(VERTEX, 1.0)).xyz;
//    float dist_from_camera = distance(cam_world_pos, vert_world_pos);
    
    vec2 st = vec2(UV.x, 1.0 - UV.y); // (0, 0) BL (1, 1) TR
    
    // Create grid
    st *= u_plane_size * u_scale;
    float odd_row = step(1., mod(st.y,2.0));
    float odd_col = step(1., mod(st.x,2.0));
    vec2 ipos = floor(st);  // get the integer coords
    st = fract(st);
    // Rotate each grid
    st = rotate2d(u_rotation_degrees * 3.14159 / 180.0) * (st - vec2(0.5)) + vec2(0.5);
    
    //vec2 fpos = fract(st);  // get the fractional coords

	vec3 color = u_background_color.rgb;
    // iters is n if not cycling back, otherwise its (n - 1) * 2
    int iters = (1 - int(u_cycle_back)) * u_iterations + int(u_cycle_back) * (u_iterations - 1) * 2;
    for (int i = 0; i < iters; i++) {
        // Basically, size grows from 0 -> 1 while pos shrinks from 0.5 -> 0
        // Shrinking equation: 0.5 - mod(s * x + i/n, 1) / 2.0
        // Growing equation:   mod(s * x + i/n, 1)
        float offset = float(i) / float(iters);
        float progress = mod((TIME * u_speed + offset), 1); // mod(s * x + i/n, 1), goes from 0 -> 1
        vec2 pos = vec2(0.5) - progress;
        vec2 size = vec2(progress * 2.0);
//        vec2 pos = vec2(0.5) - progress/2.0;
//        vec2 size = vec2(progress);
        float border = (1.0 / float(iters) + u_precision_correction) * u_border_scale;
        bool in_rect = in_rectangle(st, pos, size, border);
        
        float color_offset = float(i) / float(iters - 1);
        color = mix(u_start_color, u_end_color, color_offset).rgb * float(in_rect) + u_background_color.rgb * (1.0 - float(in_rect));
        // Do color stuff
        if (u_cycle_back) {
            if (i <= iters / 2)
                color = mix(u_start_color, u_end_color, float(i) / (float(u_iterations - 1))).rgb;
            else
                color = mix(u_end_color, u_start_color, (float(i) - float(iters) / 2.0) / (float(u_iterations - 1))).rgb;
            if (!in_rect) {
                color = u_background_color.rgb;
            }
        }
        
        if (in_rect) 
            break;
    }

    ALBEDO = color;
    
    float fade_ipos = floor(u_fade_y * u_plane_size.y * u_scale.y);
    float fade_fpos = fract(u_fade_y * u_plane_size.y * u_scale.y);
    if (ipos.y > fade_ipos) ALBEDO = u_background_color.rgb;
    else if (ipos.y < fade_ipos) ALBEDO = color;
    else {
        ALBEDO = mix(color, u_background_color.rgb, 1.0 - fade_fpos)
    }
}
"

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 1 )
shader_param/u_plane_size = Vector2( 1, 1 )
shader_param/u_scale = Vector2( 1, 1 )
shader_param/u_rotation_degrees = 0.0
shader_param/u_iterations = 5
shader_param/u_cycle_back = true
shader_param/u_speed = 0.2
shader_param/u_precision_correction = 0.0
shader_param/u_border_scale = 0.178
shader_param/u_background_color = Color( 0, 0, 0, 1 )
shader_param/u_start_color = Color( 0.0117647, 1, 0.501961, 1 )
shader_param/u_end_color = Color( 1, 0, 0.619608, 1 )
shader_param/u_fade_y = 1.0

[node name="Spatial" type="Spatial"]

[node name="Camera" type="Camera" parent="."]
transform = Transform( -0.18438, 0, 0.982855, 0, 1, 0, -0.982855, 0, -0.18438, 13.1521, 0, -7.62584 )

[node name="rect_frame2" parent="." instance=ExtResource( 1 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -4.47359, 0, -9.74812 )
material = ExtResource( 2 )
canvas_size = Vector2( 8, 4 )

[node name="rect_frame" parent="." instance=ExtResource( 1 )]
material = ExtResource( 4 )
canvas_size = Vector2( 8, 4 )

[node name="square_frame" parent="." instance=ExtResource( 3 )]
transform = Transform( 0.795537, 0, -0.605905, 0, 1, 0, 0.605905, 0, 0.795537, -0.553905, 5.16231, -16.7054 )
material = SubResource( 3 )
canvas_size = Vector2( 4, 4 )

[node name="square_frame2" parent="." instance=ExtResource( 3 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 10.1521, 0 )
material = ExtResource( 5 )

[node name="square_canvas" parent="." instance=ExtResource( 6 )]
transform = Transform( 1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, 8.1951, 3.77851, 0 )
material = ExtResource( 7 )
canvas_size = Vector2( 5.9, 5.9 )
